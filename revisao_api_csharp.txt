ðŸ“Œ RevisÃ£o API em C# (.NET)

1. O que Ã© uma API?
- Interface que permite comunicaÃ§Ã£o entre sistemas.
- No caso do .NET Web API, usamos o ASP.NET Core para expor endpoints via HTTP.

2. MÃ©todos HTTP e suas funÃ§Ãµes
- GET â†’ Buscar dados.
- POST â†’ Criar novo recurso.
- PUT â†’ Atualizar recurso por completo.
- PATCH â†’ Atualizar apenas parte do recurso.
- DELETE â†’ Excluir recurso.

3. Estrutura bÃ¡sica de uma API em C#
[ApiController]
[Route("api/[controller]")]
public class ProdutosController : ControllerBase
{
    private static List<string> produtos = new List<string>() { "TV", "Notebook", "Celular" };

    [HttpGet]
    public IActionResult Get() => Ok(produtos);

    [HttpGet("{id}")]
    public IActionResult GetById(int id)
    {
        if (id < 0 || id >= produtos.Count) return NotFound("Produto nÃ£o encontrado");
        return Ok(produtos[id]);
    }

    [HttpPost]
    public IActionResult Post([FromBody] string produto)
    {
        produtos.Add(produto);
        return Created("", produto);
    }

    [HttpPut("{id}")]
    public IActionResult Put(int id, [FromBody] string novoProduto)
    {
        if (id < 0 || id >= produtos.Count) return NotFound();
        produtos[id] = novoProduto;
        return NoContent();
    }

    [HttpDelete("{id}")]
    public IActionResult Delete(int id)
    {
        if (id < 0 || id >= produtos.Count) return NotFound();
        produtos.RemoveAt(id);
        return NoContent();
    }
}

4. Principais AnotaÃ§Ãµes
- [ApiController] â†’ Marca a classe como um controlador de API.
- [Route("api/[controller]")] â†’ Define rota padrÃ£o (nome do controller).
- [HttpGet], [HttpPost], [HttpPut], [HttpDelete] â†’ Mapeiam os mÃ©todos HTTP.

5. Status Codes mais usados
- 200 OK â†’ RequisiÃ§Ã£o bem-sucedida.
- 201 Created â†’ Recurso criado com sucesso.
- 204 No Content â†’ RequisiÃ§Ã£o bem-sucedida sem retorno.
- 400 Bad Request â†’ Erro de validaÃ§Ã£o.
- 404 Not Found â†’ Recurso nÃ£o encontrado.
- 500 Internal Server Error â†’ Erro no servidor.

6. Camadas de uma API
- Controller â†’ Recebe requisiÃ§Ãµes e envia respostas.
- Service â†’ ContÃ©m a lÃ³gica de negÃ³cio.
- Repository â†’ Acesso ao banco de dados.
- Models â†’ Estrutura dos dados (classes).

7. Exemplo de Model
public class Produto
{
    public int Id { get; set; }
    public string Nome { get; set; }
    public decimal Preco { get; set; }
}

8. Tratamento de ExceÃ§Ãµes
try
{
    // cÃ³digo que pode falhar
}
catch(Exception ex)
{
    return StatusCode(500, "Erro interno: " + ex.Message);
}

9. Boa prÃ¡tica: DTOs
public class ProdutoDTO
{
    public string Nome { get; set; }
    public decimal Preco { get; set; }
}
